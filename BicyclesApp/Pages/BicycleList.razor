@page "/bicycleList"
@using System.Security.Claims;
@inject ApplicationDbContext _dbContext
@inject AuthenticationStateProvider _authState
@inject NotificationService _notifications
@inject NavigationManager _navManager
@inject IRentalContractService _rentalUpdateService
@inject IFileUploadService _fileService
@attribute [Authorize(Roles = "Manager")]

<style>
    .rz-grid {
        display: flex;
        width: 100%;
    }

    .rz-grid-table {
        table-layout: fixed;
        width: 100%;
    }

    .rz-body {
        align-items: @(isLoading ? "center" : "baseline")
    }
</style>

<RadzenNotification>

</RadzenNotification>
@if (isLoading)
{
    <RadzenIcon Icon="sync" class="rotate-icon"/>
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" Text="Додати велосипед" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && bicyclesToInsert.Count() > 0)" />
    </RadzenStack>

    <RadzenDataGrid @ref="bicyclesGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" EditMode="@editMode" Data="@bicycles" TItem="Bicycle" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset">
        <Columns>
            <RadzenDataGridColumn Property="Id" Title="ID" Width="60px" Frozen="true" Filterable="false" FrozenPosition="FrozenColumnPosition.Left"/>

            <RadzenDataGridColumn Property="Name" Title="Назва" >
                <EditTemplate Context="bicycle">
                    <RadzenTextBox @bind-Value="bicycle.Name" Style="width:100%; display: block" Name="Name" />
                    <RadzenRequiredValidator Text="Необхідно вказати назву велосипеда" Component="Name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="BicycleType.Name" Title="Тип" >
                <Template Context="bicycle">
                    @bicycle?.BicycleType?.Name
                </Template>
                <EditTemplate Context="bicycle">
                    <RadzenDropDown @bind-Value="bicycle.Type_Id" Name="City" Data="@bicycleTypes" ValueProperty="Id" Style="width:100%; display: block;">
                        <Template>
                            @context.Name
                        </Template>
                    </RadzenDropDown>
                    <RadzenNumericRangeValidator Text="Необхідно обрати місто" Component="City" Popup="true" Style="z-index: 999;" Min="1" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="MaxAllowedWeight" Title="Дозволена вага">
                <EditTemplate Context="bicycle">
                    <RadzenNumeric @bind-Value="bicycle.MaxAllowedWeight" Name="BicycleMaxWeight" Style="width:100%; display: block" />
                    <RadzenNumericRangeValidator Min="1" Text="Необхідно вказати дозволену вагу велосипеда" Component="BicycleMaxWeight" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="BookingNumber" Title="Всього в прокаті" />

            <RadzenDataGridColumn Property="IsBooked" Title="Вільний">
                <Template Context="bicycle">
                    @(bicycle.IsBooked ? "Ні" : "Так")
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="Parking.StreetAdress" Title="Парковка">
                <Template Context="bicycle">
                    @bicycle?.Parking?.StreetAdress
                </Template>
                <EditTemplate Context="bicycle">
                    <RadzenDropDown @bind-Value="bicycle.Parking_Id" Name="Parking" Data="@parkings" ValueProperty="Id" Style="width:100%; display: block;">
                        <Template>
                            @context.StreetAdress
                        </Template>
                    </RadzenDropDown>
                    <RadzenNumericRangeValidator Text="Необхідно обрати парковку" Component="Parking" Popup="true" Style="z-index: 999;" Min="1" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Context="bicycle" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="200px">
                <Template Context="bicycle">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(bicycle))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(bicycle))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton Icon="content_copy" class="my-1 ms-1" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DuplicateRow(bicycle))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton Icon="link" class="my-1 ms-1" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => _navManager.NavigateTo($"/bicycleUpdate/{bicycle.Id}"))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="bicycle">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(bicycle))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(bicycle))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(bicycle))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private bool isLoading = true;
    private int CurrentUserId;
    private ClaimsPrincipal ContextUser;

    RadzenDataGrid<Bicycle> bicyclesGrid;

    IEnumerable<Bicycle> bicycles;
    IEnumerable<BicycleType> bicycleTypes;
    IEnumerable<Parking> parkings;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<Bicycle> bicyclesToInsert = new List<Bicycle>();
    List<Bicycle> bicyclesToUpdate = new List<Bicycle>();

    void Reset()
    {
        bicyclesToInsert.Clear();
        bicyclesToUpdate.Clear();
    }

    void Reset(Bicycle bicycle)
    {
        bicyclesToInsert.Remove(bicycle);
        bicyclesToUpdate.Remove(bicycle);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            await _rentalUpdateService.UpdateContractsAsync();

            await LoadCurrentUser();

            await LoadBicycles();
            bicycleTypes = await _dbContext.BicycleTypes.ToListAsync();
            parkings = await _dbContext.Parkings.Where(p => p.Owner_Id == CurrentUserId).ToListAsync();

            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCurrentUser()
    {
        var context = await _authState.GetAuthenticationStateAsync();
        ContextUser = context.User;
        var idClaim = context.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"));
        try
        {
            CurrentUserId = int.Parse(idClaim.Value);
        }
        catch (Exception ex)
        {

        }
    }

    private async Task LoadBicycles()
    {
        bicycles = await _dbContext.Bicycles
        .Include(p => p.Parking)
        .Where(b => b.Parking.Owner_Id == CurrentUserId)
        .Include(p => p.BicycleType).ToListAsync();
    }

    async Task EditRow(Bicycle bicycle)
    {
        if (editMode == DataGridEditMode.Single && bicyclesToInsert.Count() > 0)
        {
            Reset();
        }

        bicyclesToUpdate.Add(bicycle);
        await bicyclesGrid.EditRow(bicycle);
    }

    private async Task<bool> IsMaxLimitReached(Bicycle bicycle, bool isUpdate = false)
    {
        var parking = await _dbContext.Parkings.FirstOrDefaultAsync(p => p.Id == bicycle.Parking_Id);
        await _dbContext.Entry<Parking>(parking).ReloadAsync();

        if (parking != null && parking.CurrentBicyclesAmount >= parking.MaxBicyclesAmount)
        {
            if(isUpdate)
            {
                var entry = _dbContext.Entry(bicycle);
                var parkingProperty = entry.Property(e => e.Parking_Id);
                if (!parkingProperty.IsModified && parking.CurrentBicyclesAmount == parking.MaxBicyclesAmount)
                {

                    return false;
                }
            }
            SendWarningNotification();
            bicycleTypes = await _dbContext.BicycleTypes.ToListAsync();
            parkings = await _dbContext.Parkings.Where(p => p.Owner_Id == CurrentUserId).ToListAsync();
            Reset();
            return true;
        }
        return false;
    }

    async Task DuplicateRow(Bicycle bicycle)
    {
        if(await IsMaxLimitReached(bicycle))
        {
            return;
        }

        var bicycleCopy = new Bicycle()
        {
            Name = bicycle.Name,
            Description = bicycle.Description,
            Weight = bicycle.Weight,
            MaxAllowedWeight = bicycle.MaxAllowedWeight,
            MaxSpeed = bicycle.MaxSpeed,
            IsBooked = false,
            BookingNumber = 0,
            Type_Id = bicycle.Type_Id,
            Parking_Id = bicycle.Parking_Id,
            ImageUrl = bicycle.ImageUrl
        };

        await _dbContext.AddAsync(bicycleCopy);

        await _dbContext.SaveChangesAsync();

        var bicycleOffers = await _dbContext.RentalOffers.Where(o => o.Bicycle_Id == bicycle.Id).ToListAsync();

        if(bicycleOffers.Count() > 0)
        {
            var copyBicycleOffers = bicycleOffers.Select<RentalOffer, RentalOffer>(o => {
                o.Id = 0;
                o.Bicycle_Id = bicycleCopy.Id;
                o.Bicycle = new Bicycle();
                return o;
            });

            await _dbContext.AddRangeAsync(copyBicycleOffers);

            await _dbContext.SaveChangesAsync();
        }

        await LoadBicycles();

        await bicyclesGrid.Reload();
    }

    async Task OnUpdateRow(Bicycle bicycle)
    {
        if (await IsMaxLimitReached(bicycle, true))
        {
            await _dbContext.Entry(bicycle).ReloadAsync();
            return;
        }

        Reset(bicycle);

        _dbContext.Update(bicycle);

        await _dbContext.SaveChangesAsync();
    }

    async Task SaveRow(Bicycle bicycle)
    {
        await bicyclesGrid.UpdateRow(bicycle);
    }

    async Task CancelEdit(Bicycle bicycle)
    {
        Reset(bicycle);

        bicyclesGrid.CancelEditRow(bicycle);

        var parkingEntry = _dbContext.Entry(bicycle);
        if (parkingEntry.State == EntityState.Modified)
        {
            parkingEntry.CurrentValues.SetValues(parkingEntry.OriginalValues);
            parkingEntry.State = EntityState.Unchanged;
        }
    }

    async Task DeleteRow(Bicycle bicycle)
    {
        Reset(bicycle);

        if (bicycles.Contains(bicycle))
        {
            if(bicycle.ImageUrl != null && !bicycle.ImageUrl.Contains(SD.DefaultImageName))
            {
                _fileService.DeleteFile(bicycle.ImageUrl);
            }
            _dbContext.Remove<Bicycle>(bicycle);

            await _dbContext.SaveChangesAsync();

            await LoadBicycles();

            await bicyclesGrid.Reload();
        }
        else
        {
            bicyclesGrid.CancelEditRow(bicycle);
            await bicyclesGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var bicycle = new Bicycle();
        if(parkings.Count() > 0)
        {
            bicycle.Parking_Id = parkings.First().Id;
        }
        bicycle.ImageUrl = $"/images/product/{SD.DefaultImageName}";
        bicyclesToInsert.Add(bicycle);
        await bicyclesGrid.InsertRow(bicycle);
    }

    async Task OnCreateRow(Bicycle bicycle)
    {
        if (await IsMaxLimitReached(bicycle))
        {
            await bicyclesGrid.Reload();
            return;
        }

        await _dbContext.AddAsync(bicycle);

        await _dbContext.SaveChangesAsync();

        bicyclesToInsert.Remove(bicycle);

        await LoadBicycles();

        await bicyclesGrid.Reload();
    }

    private void SendWarningNotification()
    {
        _notifications.Notify(new NotificationMessage
            {
                Duration = 5000,
                Style = "width: 500px;",
                Severity = NotificationSeverity.Warning,
                Summary = "Неможливо виконати дію",
                Detail = "Паркінг заповнено, необхідно збільшити максимальну кількість велосипедів.",
                Click = args => { _navManager.NavigateTo("/parkingList"); }
            });
    }
}
