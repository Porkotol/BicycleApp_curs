@page "/parkingList"
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@inject ApplicationDbContext _dbContext
@inject UserManager<AppUser> _userManager
@inject NavigationManager _navManager
@inject AuthenticationStateProvider _authState
@inject NotificationService _notifications
@attribute [Authorize(Roles = "Admin, Manager")]

<style>
    .rz-grid {
    display: flex;
    width: 100%;
    }

    .rz-grid-table {
    table-layout: fixed;
    width: 100%;
    }

    .rz-body {
        align-items: @(isLoading ? "center" : "baseline")
    }
</style>

<RadzenNotification style="top: 10px;"></RadzenNotification>
@if(isLoading)
{
    <RadzenIcon Icon="sync" class="rotate-icon" />
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" Text="Створити парковку" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && parkingsToInsert.Count() > 0)" />
    </RadzenStack>

    <RadzenDataGrid @ref="parkingsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" EditMode="@editMode"
                    Data="@parkings" TItem="Parking" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset">
        <Columns>
            <RadzenDataGridColumn Property="Id" Title="ID" Width="40px" Frozen="true" Filterable="false" />

            <RadzenDataGridColumn Property="City.Name" Title="Місто" Width="200px">
                <Template Context="parking">
                    @parking?.City?.Name
                </Template>
                <EditTemplate Context="parking">
                    <RadzenDropDown @bind-Value="parking.City_Id" Name="City" Data="@cities" ValueProperty="Id" Style="width:100%; display: block;">
                        <Template>
                            @context.Name
                        </Template>
                    </RadzenDropDown>
                    <RadzenNumericRangeValidator Text="Необхідно обрати місто" Component="City" Popup="true" Style="z-index: 999;" Min="1" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="StreetAdress" Title="Адреса вулиці" Width="200px">
                <EditTemplate Context="parking">
                    <RadzenTextBox @bind-Value="parking.StreetAdress" Name="StreetAdress" style="width:100%; display: block;" />
                    <RadzenRequiredValidator Text="Необхідно ввести адресу" Component="StreetAdress" Popup="true" Style="z-index: 999;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            @if(!ContextUser.IsInRole(SD.Role_Admin))
            {
                <RadzenDataGridColumn Property="Owner.Name" Title="Власник" Width="200px">
                    <Template Context="parking">
                        @parking?.Owner?.Name
                    </Template>
                </RadzenDataGridColumn>
            } else
            {
                <RadzenDataGridColumn Property="Owner.Name" Title="Власник" Width="200px">
                    <Template Context="parking">
                        @parking?.Owner?.Name
                    </Template>
                    <EditTemplate Context="parking">
                        <RadzenDropDown Name="Owner" @bind-Value="parking.Owner_Id" Data="@users" ValueProperty="Id" Style="width:100%; display: block;">
                            <Template>
                                @context.Name
                            </Template>
                        </RadzenDropDown>
                        <RadzenNumericRangeValidator Text="Необхідно обрати власника" Component="Owner" Min="1" Popup="true" Style="z-index: 999;" />
                    </EditTemplate>
                </RadzenDataGridColumn>
            }

            <RadzenDataGridColumn Property="MaxBicyclesAmount" Title="Макс. кільк. велосипедів" Width="200px">
                <EditTemplate Context="parking">
                    <RadzenNumeric @bind-Value="parking.MaxBicyclesAmount" Min="0" Name="MaxBicyclesAmount" />
                    <RadzenRequiredValidator Text="Необхідно вказати максимальну кількість велосипедів" Component="MaxBicyclesAmount" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="CurrentBicyclesAmount" Title="Зареєстровано велосипедів" Width="200px" />

            <RadzenDataGridColumn Context="parking" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="120px">
                <Template Context="parking">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(parking))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(parking))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="parking">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(parking))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(parking))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(parking))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private int CurrentUserId;
    private ClaimsPrincipal ContextUser;
    private string ManagerName;

    private bool isLoading = true;

    RadzenDataGrid<Parking> parkingsGrid;
    IEnumerable<Parking> parkings;
    IEnumerable<City> cities;
    IEnumerable<AppUser> users;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<Parking> parkingsToInsert = new List<Parking>();
    List<Parking> parkingsToUpdate = new List<Parking>();

    void Reset()
    {
        parkingsToInsert.Clear();
        parkingsToUpdate.Clear();
    }

    void Reset(Parking parking)
    {
        parkingsToInsert.Remove(parking);
        parkingsToUpdate.Remove(parking);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();

            var absoluteUri = new Uri(_navManager.Uri);
            var queryParam = System.Web.HttpUtility.ParseQueryString(absoluteUri.Query);
            try
            {
                ManagerName = queryParam["managerName"];
            } catch (Exception ex)
            {
                ManagerName = string.Empty;
            }

            await LoadCurrentUserId();

            await LoadParkings();

            cities = await _dbContext.Cities.ToListAsync();
            users = await _userManager.GetUsersInRoleAsync(SD.Role_Manager);

            isLoading = false;
            StateHasChanged();

            if (!string.IsNullOrEmpty(ManagerName))
            {
                var column = parkingsGrid.ColumnsCollection.Where(c => c.Property == "Owner.Name").FirstOrDefault();
                if (column != null)
                {
                    column.SetFilterValue(ManagerName);
                    column.SetFilterOperator(FilterOperator.Equals);
                    await parkingsGrid.Reload();
                }
            }
        }
    }

    private async Task LoadCurrentUserId()
    {
        var context = await _authState.GetAuthenticationStateAsync();
        ContextUser = context.User;
        var idClaim = context.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"));
        try
        {
            CurrentUserId = int.Parse(idClaim.Value);
        }
        catch (Exception ex)
        {

        }
    }

    private async Task LoadParkings()
    {
        if(!ContextUser.IsInRole(SD.Role_Admin))
        {
            parkings = await _dbContext.Parkings.Include(p => p.City).Include(p => p.Owner).Where(p => p.Owner_Id == CurrentUserId).ToListAsync();
        } else
        {
            parkings = await _dbContext.Parkings.Include(p => p.City).Include(p => p.Owner).ToListAsync();
        }
    }


    async Task EditRow(Parking parking)
    {
        if (editMode == DataGridEditMode.Single && parkingsToInsert.Count() > 0)
        {
            Reset();
        }

        parkingsToUpdate.Add(parking);
        await parkingsGrid.EditRow(parking);
    }

    async Task OnUpdateRow(Parking parking)
    {
        if(parking.CurrentBicyclesAmount > parking.MaxBicyclesAmount)
        {
            _notifications.Notify(new NotificationMessage
                {
                    Duration = 5000,
                    Style = "width: 500px;",
                    Severity = NotificationSeverity.Warning,
                    Summary = "Неможливо виконати дію",
                    Detail = "Паркінг заповнено, максимальна кількість не може бути меншою за наявну",
                    Click = args => { _navManager.NavigateTo("/parkingList"); }
                });
            await _dbContext.Entry(parking).ReloadAsync();
            return;
        }
        try
        {
            Reset(parking);

            _dbContext.Update(parking);

            await _dbContext.SaveChangesAsync();
        }
        catch (DbUpdateException ex)
        {
            await ShowUniqueNotify();
            await _dbContext.Entry(parking).ReloadAsync();
        }
    }

    async Task SaveRow(Parking parking)
    {
        await parkingsGrid.UpdateRow(parking);
    }

    async Task CancelEdit(Parking parking)
    {
        Reset(parking);

        parkingsGrid.CancelEditRow(parking);

        var parkingEntry = _dbContext.Entry(parking);
        if (parkingEntry.State == EntityState.Modified)
        {
            parkingEntry.CurrentValues.SetValues(parkingEntry.OriginalValues);
            parkingEntry.State = EntityState.Unchanged;
        }
    }

    async Task DeleteRow(Parking parking)
    {
        Reset(parking);

        if (parkings.Contains(parking))
        {
            _dbContext.Remove<Parking>(parking);

            await _dbContext.SaveChangesAsync();

            await LoadParkings();

            await parkingsGrid.Reload();
        }
        else
        {
            parkingsGrid.CancelEditRow(parking);
            await parkingsGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var parking = new Parking();
        var user = (await _authState.GetAuthenticationStateAsync()).User;
        if (!user.IsInRole(SD.Role_Admin))
        {
            parking.Owner_Id = CurrentUserId;
            parking.Owner = await _dbContext.Users.FirstOrDefaultAsync(u => u.Id == CurrentUserId);
        }
        parkingsToInsert.Add(parking);
        await parkingsGrid.InsertRow(parking);
    }

    async Task OnCreateRow(Parking parking)
    {
        try
        {
            await _dbContext.AddAsync(parking);

            await _dbContext.SaveChangesAsync();
        }
        catch (DbUpdateException ex)
        {
            _dbContext.Remove(parking);
            await ShowUniqueNotify();
        }

        parkingsToInsert.Remove(parking);

        await LoadParkings();

        await parkingsGrid.Reload();
    }

    private async Task ShowUniqueNotify()
    {
        _notifications.Notify(new NotificationMessage
            {
                Duration = 2500,
                Style = "width: 500px;",
                Severity = NotificationSeverity.Warning,
                Summary = "Неможливо створити парковку",
                Detail = "Парковка з такою адресою вже існує"
            });
    }
}
